#+title: music.enigmacurry.com
#+author: EnigmaCurry
#+OPTIONS: ^:{}
#+EXPORT_FILE_NAME: index.html
#+INCLUDE: "~/git/vendor/enigmacurry/literate-k3s/meta/export-html.org"

* Getting Started
This is a [[https://github.com/EnigmaCurry/literate-k3s][literate-k3s]] Emacs Org-Babel document, (or its exported HTML form on
the web.) Please read the upstream [[https://enigmacurry.github.io/literate-k3s/#Introduction][literate-k3s Introduction]] if you are new to
this. 

This guide will install [[https://funkwhale.audio/][funkwhale]], a self-hosted (federated) audio hosting
platform and web player, on a new (single node) [[https://k3s.io][K3s]] cluster that you will
create.

Your first step is to install literate-k3s, which you just need to clone the
repository to your workstation:

#+begin_src shell :noweb yes :eval never-export :exports code
git clone https://github.com/EnigmaCurry/literate-k3s.git \
    ~/git/vendor/enigmacurry/literate-k3s
#+end_src

Your second step is to create another new directory tree on your workstation, to
form a new git repository, in which to hold all of the configurations for this
cluster:

#+begin_src shell :noweb yes :eval never-export :exports code
mkdir -p <<SRC_DIR>>/
mkdir -p <<SRC_DIR>>/kube-system/traefik/
mkdir -p <<SRC_DIR>>/flux-system/
mkdir -p <<SRC_DIR>>/funkwhale/
mkdir -p <<SRC_DIR>>/rook-nfs-system/
mkdir -p <<SRC_DIR>>/rook-nfs/
#+end_src

Download this current org source file into your new directory:

#+begin_src shell :noweb yes :eval never-export :exports code
cd <<SRC_DIR>>
curl -Lo <<SRC_URL>>
#+end_src

Open and edit the downloaded file, in Emacs Org-Mode. Confirm the permission
dialog to run the initialization code. Configure the variables in the [[Core Config][Core
Config]] section. When you save this file, it automatically runs
=org-resolve-deps-tangle=, which (re)creates several YAML manifest files which
describe all of your cluster resources.

The resulting directory structure will look like this (annotated):
#+begin_src example :noweb yes
clusters <-- Main directory holding all cluster repositories:
 └─<<CLUSTER>> <-- The `Funkwhale` cluster repository
    ├─.gitignore  <-- git ignores .org-resolve-deps.org on next line
    ├─.org-resolve-deps.org <-- temporary Org src from org-resolve-deps-tangle
    ├─flux-system <-- namespace directory for Flux (K8s Continuous Delivery)
    │  └─kustomization.yaml <-- Kustomize installs the namespace manifest
    ├─index.html <-- HTML export of this Org source document
    ├─kube-system <-- Root Cluster namespace
    │  └─traefik <-- Traefik is our TLS reverse proxy and Ingress Controller
    │     ├─crd.yaml <-- Traefik Custom Resource Definitions manifest
    │     ├─daemonset.yaml <-- Traefik DaemonSet manifest runs traefik on all nodes
    │     ├─kustomization.yaml <-- Kustomize installs all these manifests
    │     ├─pvc.yaml <-- PhysicalVolumeClaim creates 100MB volume to store acme.json
    │     ├─rbac.yaml <-- Roles for Traefik to watch and respond to the cluster
    │     └─whoami.yaml <-- Deployment manifest for `whoami` testing service
    ├─meta <-- Holds the CSS and JavaScript for the HTML export.
    │  └─css
    │     └─build
    │        ├─all.min.js
    │        └─solarized-dark.css
    └─music.enigmacurry.com.org <-- This org file you're reading now.
#+end_src

* Core Config
** SRC_URL
This is the source URL for this document, used in the [[Getting Started][Getting Started]] guide
above.
#+name: SRC_URL
#+begin_src config :noweb yes :eval no
https://raw.githubusercontent.com/EnigmaCurry/literate-k3s/master/clusters/music.enigmacurry.com/music.enigmacurry.com.org
#+end_src
** CLUSTER
Set =CLUSTER= to be the domain name for your cluster:
#+name: CLUSTER
#+begin_src config :noweb yes :eval no
music.enigmacurry.com
#+end_src
** CLUSTER_SSH_USER
Set =CLUSTER_SSH_USER= to be the admin SSH account of the cluster (usually
root).
#+name: CLUSTER_SSH_USER
#+begin_src config :noweb yes :eval no
root
#+end_src
** KUBE_CONFIG
  =KUBE_CONFIG= is the local path to the kubectl config file
  #+name: KUBE_CONFIG
  #+begin_src config :noweb yes :eval no
  ${HOME}/.kube/<<CLUSTER>>-config
  #+end_src
** kubectl command
 Since you'll need to specify the kubectl config file each and every time you use
 =kubectl=, let's create a NoWeb alias for it (=<<kubectl>>=), to use in other
 code blocks.
 #+name: kubectl
 #+begin_src config :noweb yes :eval no
 kubectl --kubeconfig=<<KUBE_CONFIG>>
 #+end_src

* Create cluster
Prepare an Ubuntu or Debian node, setup SSH so that your workstation can access
the root account with your key file (use =ssh-keygen= and =ssh-copy-id
root@CLUSTER-DOMAIN= to generate and install key).

Run =apt upgrade= and install =curl= on the server :

#+begin_src shell :noweb yes :eval never-export :exports code :results output
cat << EOF | ssh <<CLUSTER_SSH_USER>>@<<CLUSTER>> /bin/bash
apt -qq update && apt -qq upgrade -y && apt install -y curl
EOF
#+end_src

#+RESULTS:
: All packages are up to date.
: 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
: Reading package lists...
: Building dependency tree...
: Reading state information...
: curl is already the newest version (7.68.0-1ubuntu2.4).
: 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

Install [[https://github.com/alexellis/k3sup#readme][k3sup]], then create the cluster:

#+begin_src shell :noweb yes :eval never-export :exports code :results none
set -e
mkdir -p ~/.kube
k3sup install --host <<CLUSTER>> --user <<CLUSTER_SSH_USER>> \
  --local-path <<KUBE_CONFIG>> --k3s-extra-args '--disable traefik'
#+end_src

 * Wait a minute or two for the cluster to come up.
 * Now test to see if you can connect and output node status:

#+begin_src shell :noweb yes :eval never-export :exports both
kubectl --kubeconfig=<<KUBE_CONFIG>> get nodes
#+end_src

#+RESULTS:
| NAME  | STATUS | ROLES  | AGE   | VERSION      |
| music | Ready  | master | 7m47s | v1.19.7+k3s1 |

* kube-system
=kube-system= is the namespace for running system wide features, mostly network
related. 
** Traefik Config
Edit the variables for the Traefik config:
*** TRAEFIK_ACME_EMAIL
  =TRAEFIK_ACME_EMAIL= is the email address to register with the ACME service
  provider. 
 #+name: TRAEFIK_ACME_EMAIL
 #+begin_src config :eval no
 letsencrypt@enigmacurry.com
 #+end_src
*** TRAEFIK_ACME_SERVER
 =TRAEFIK_ACME_SERVER= is the URL for the Let's Encrypt API (Or other ACME
 provider). For development purposes, use the staging URL. For production use
 the URL https://acme-v02.api.letsencrypt.org/directory instead (will produce
 valid certificates in web browsers).

 #+name: TRAEFIK_ACME_SERVER
 #+begin_src config :eval no
 https://acme-staging-v02.api.letsencrypt.org/directory
 #+end_src

*** TRAEFIK_WHOAMI_DOMAIN
 [[https://github.com/traefik/whoami][traefik/whoami]] can be deployed to test Traefik functionality. It needs its own
 domain name to respond to. =TRAEFIK_WHOAMI_DOMAIN= is the subdomain that the
 whoami service responds to.
 #+name: TRAEFIK_WHOAMI_DOMAIN
 #+begin_src config :noweb yes :eval no
 whoami.<<CLUSTER>>
 #+end_src
*** TRAEFIK_VERSION
 The version number of Traefik to install (eg. =2.3=).
 #+name: TRAEFIK_VERSION
 #+begin_src config :eval no
 v2.3
 #+end_src
*** TRAEFIK_LOG_LEVEL
 =TRAEFIK_LOG_LEVEL= is the filter level on the traefik log.
 #+name: TRAEFIK_LOG_LEVEL
 #+begin_src config :eval no
 INFO
 #+end_src
** Sealed Secrets Config
*** SEALED_SECRETS_VERSION
Choose the [[https://github.com/bitnami-labs/sealed-secrets/releases][release version for Sealed Secrets]]
#+name: SEALED_SECRETS_VERSION
#+begin_src config :noweb yes :eval no
v0.14.1
#+end_src
** Traefik Deployment
#+BEGIN_COMMENT
Open the Traefik library module in
=~/git/vendor/enigmacurry/literate-k3s/lib/traefik.org= that you cloned
previously, as shown in the INCLUDE statement path below. Follow the directions
and execute the code blocks there, found in =traefik.org=. Know that when you
open =traefik.org= after having already opened this current file (and hence
evaluated the code in the =Emacs Local Variables=), that variable references
like =<<SRC_DIR>>= refer back to /this current file's/ directory, /not/ in
relation to where =traefik.org= exists. So that, when you run those shell code
blocks, you will be creating new directories and files in /this current file's/
directory.
#+END_COMMENT
#+INCLUDE: "~/git/vendor/enigmacurry/literate-k3s/lib/traefik.org"
** Sealed Secrets Deployment
#+BEGIN_COMMENT
Follow the deployment instructions in the Sealed Secrets library INCLUDE:
#+END_COMMENT
#+INCLUDE: "~/git/vendor/enigmacurry/literate-k3s/lib/sealed_secrets.org"
* flux-system

This installation assumes you already have a remote git repository host that you
trust (probably a third party service like GitLab or GitHub), and that you have
no need to switch to [[https://gitea.io/][Gitea]], which is a self-hosted, low-resource, cluster-local,
GitHub-like alternative. If you /do/ want that, follow the more in depth
[[https://github.com/EnigmaCurry/literate-k3s/blob/master/clusters/k3s.example.com/k3s.example.com.org][k3s.example.com]] guide, which takes a more "self-hosted everything= approach.
(however, that other guide does not discuss funkwhale, so come back here when
you're done.)
** Flux Config
*** FLUX_VERSION
Choose the [[https://github.com/fluxcd/flux2/releases][Flux2 release version]] :
#+begin_src config :noweb yes :eval no
v0.7.7
#+end_src
*** FLUX_REPO_NAME
The name of the git repository containing these org files, and from which flux
reads. Usually it's the same as =CLUSTER=.
#+name: FLUX_REPO_NAME
#+begin_src config :noweb yes :eval no
<<CLUSTER>>
#+end_src
*** FLUX_REPO_ORG
The name of the owner of the git repository.
#+name: FLUX_REPO_ORG
#+begin_src config :noweb yes :eval no
EnigmaCurry
#+end_src
*** FLUX_REPO_HOST_PORT
The Hostname and Port number of the git repository remote URL:
#+name: FLUX_REPO_HOST_PORT
#+begin_src config :noweb yes :eval no
github.com:22
#+end_src
*** FLUX_GIT_REMOTE
The SSH Git URL of your remote repository. Note the syntax difference between
this and the format that GitHub shows on their repository pages: Must begin with
=ssh://= and the use of a =/= instead of a =:= between the domain and
organization name. (This might work with other URL forms, like HTTPS, but this
is the only one that's been tested:)
#+name: FLUX_GIT_REMOTE
#+begin_src config :noweb yes :eval no
ssh://git@<<FLUX_REPO_HOST_PORT>>/<<FLUX_REPO_ORG>>/<<FLUX_REPO_NAME>>.git
#+end_src
** Flux Deployment
#+BEGIN_COMMENT
Follow the deployment instructions in the Flux library INCLUDE:
#+END_COMMENT
#+INCLUDE: "~/git/vendor/enigmacurry/literate-k3s/lib/flux.org"
* rook-nfs-system
** Rook Config
*** ROOK_PVC_SIZE
    The size of root Rook volume (contains ALL other rook volumes)
    #+name: ROOK_PVC_SIZE
    #+begin_src config :noweb yes :eval no
    50Gi
    #+end_src
*** ROOK_VERSION
    Use the latest version from https://github.com/rook/rook/releases
    #+name: ROOK_VERSION
    #+begin_src config :noweb yes :eval no
    v1.5.6
    #+end_src

** Rook Deployment
#+BEGIN_COMMENT
Follow the deployment instructions in the Rook library INCLUDE:
#+END_COMMENT
#+INCLUDE: "~/git/vendor/enigmacurry/literate-k3s/lib/rook-nfs.org"
* Funkwhale
** Funkwhale Config
*** FUNKWHALE_DOMAIN
    Funkwhale will respond on the main cluster domain:
    #+name: FUNKWHALE_DOMAIN
    #+begin_src config :noweb yes :eval no
    <<CLUSTER>>
    #+end_src
*** FUNKWHALE_HELM_CHART_VERSION
    #+begin_src config :noweb yes :eval no
    0.3.6
    #+end_src
** Funkwhale Deployment
*** Add Helm chart repositories to Flux:
    A [[https://gitlab.com/ananace/charts/-/tree/master/charts/funkwhale][very nice person packaged a funkwhale helm chart]]:
    #+begin_src shell :noweb yes :eval never-export :exports code :results none
    flux create source helm bitnami \
    --url=https://charts.bitnami.com/bitnami \
    --interval=12h --export > <<SRC_DIR>>/funkwhale/helm.sources.yaml
    flux create source helm ananace \
    --url=https://ananace.gitlab.io/charts \
    --interval=12h --export >> <<SRC_DIR>>/funkwhale/helm.sources.yaml
    #+end_src
*** Update Helm releases
    #+begin_src shell :noweb yes :eval never-export :exports code :results none
    flux create helmrelease funkwhale \
      --interval=5m \
      --source=HelmRepository/ananace \
      --chart=funkwhale \
      --target-namespace=funkwhale \
      --values=funkwhale/helm.values.yaml \
      --chart-version="<<FUNKWHALE_HELM_CHART_VERSION>>" \
      --export > funkwhale/helm.release.yaml
    #+end_src

*** Commit and push manifests to git repository
    #+begin_src shell :noweb yes :eval never-export :exports code
    git -C <<SRC_DIR>> add funkwhale
    git -C <<SRC_DIR>> commit -m "Funkwhale"
    #+end_src

    #+begin_src shell :noweb yes :eval never-export :exports code
    git -C <<SRC_DIR>> push
    #+end_src
    
    Now flux will apply the manifests for you..
*** Check services:
    Check the status of the helm release:
    #+begin_src shell :noweb yes :eval never-export :exports code :results output
    <<kubectl>> -n flux-system get helmreleases.helm.toolkit.fluxcd.io
    <<kubectl>> -n funkwhale get all
    #+end_src
    
    Check that volumes are bound via =local-path= :
    #+begin_src shell :noweb yes :eval never-export :exports code
    <<kubectl>> -n funkwhale get pvc
    #+end_src

    #+RESULTS:

*** funkwhale/kustomization.yaml
  #+begin_src yaml :noweb yes :eval no :tangle funkwhale/kustomization.yaml
  apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization
  resources:
  - namespace.yaml
  - helm.sources.yaml
  - helm.release.yaml
  #+end_src
*** funkwhale/namespace.yaml
  #+begin_src yaml :noweb yes :eval no :tangle funkwhale/namespace.yaml
  apiVersion: v1
  kind: Namespace
  metadata:
    name: funkwhale
  #+end_src

*** funkwhale/helm.values.yaml
    #+begin_src yaml :noweb yes :eval no :tangle funkwhale/helm.values.yaml
    djangoSecret: insecure-secret
    persistence:
      enabled: true
      size: 25Gi
      storageClass: rook-nfs-share1
    ingress:
      enabled: true
      hosts:
      - host: <<FUNKWHALE_DOMAIN>>
        serviceName: funkwhale
        servicePort: 80
        path: /
      annotations:
        kubernetes.io/ingress.class: traefik
        traefik.ingress.kubernetes.io/router.tls.certresolver: default
    #+end_src
* LICENSE
#+INCLUDE: "~/git/vendor/enigmacurry/literate-k3s/LICENSE.org"
* COMMENT Emacs Local Variables
This section contains the =Local Variables= that [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables][Emacs reads when it loads this
file]]. This section must be located "no more than 3000 characters from the end of
the file", so you need to keep this as the very last section of this document.
This section is excluded from the HTML output because it is tagged with
=COMMENT=. 

# Local Variables:
# eval: (progn (load-file "~/git/vendor/enigmacurry/literate-k3s/meta/org-meta.el") (literate-k3s-init))
# End:


